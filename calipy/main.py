# (c) 2019 MPI for Neurobiology of Behavior, Florian Franzen, Abhilash Cheekoti
# SPDX-License-Identifier: LGPL-2.1

import argparse
import logging

from PyQt5.QtWidgets import QApplication

from . import core, ui

logger = logging.getLogger(__name__)


def main():
    """Run main GUI with supplied arguments"""

    parser = argparse.ArgumentParser(prog="CaliPy")

    # Positional arguments
    parser.add_argument('--recordings', type=str, required=False, nargs='*', default=[None],
                        help="Give a calipy system file (*.system.yml) recording file paths"
                             "or recording files directly.")
    parser.add_argument('--pipelines', type=str, required=False, nargs='*', default=[None],
                        help="Provide pipelines readable by bbo-svidreader. "
                             "The final output of the pipeline is used to display calibration.")
    parser.add_argument("--calib_file", type=str, required=False, nargs=1, default=[None],
                        help="Calibration .yml or .npy file generated by calibcam, or path to directory containing calibcam results.")

    # Loading other results from calibcam
    parser.add_argument("--load_detections", type=str, required=False, nargs='*', default=['true'],
                        help="Default true, loads from 'calib_file',"
                             "or provide list of detections to load,"
                             "or set to false to not load detections.")
    parser.add_argument("--load_calibration_single", type=str, required=False, nargs='*', default=['true'],
                        help="Default true, loads from 'calib_file',"
                             "or provide list of calibration_single to load,"
                             "or set to false to not load single camera calibrations.")

    parser.add_argument('-log', '--loglevel', default='info', help='Provide logging level')

    config = parser.parse_args()
    logging.basicConfig(level=config.loglevel.upper())

    app = QApplication([])
    app.setApplicationDisplayName(parser.prog)

    context = core.CalibrationContext()

    gui = ui.MainWindow(context)
    gui.resize(QApplication.primaryScreen().availableSize())
    gui.show()


    # Recordings
    recs_provided = False
    if isinstance(config.recordings[0], str):
        if config.recordings[0].endswith(".system.yml"):
            gui.open(config.recordings[0])
            recs_provided = True
        else:
            rec_file_names = config.recordings
            if config.pipelines[0] is None:
                rec_pipelines = None
            elif len(config.pipelines) == len(rec_file_names):
                rec_pipelines = config.pipelines
            elif len(config.pipelines) == 1:
                rec_pipelines = config.pipelines * len(rec_file_names)
            else:
                raise RuntimeError(f"Sorry, the number of pipelines ({len(config.pipelines)}) "
                                   f"does not match the number of videos ({len(config.videos)})!")

            gui.open_videos(videos=rec_file_names, pipelines=rec_pipelines)
            recs_provided = True

    if not recs_provided:
        logger.log(logging.INFO, "No video information provided")

    # Detections
    load_detections_from_calib = True
    if config.load_detections[0] != 'true':
        load_detections_from_calib = False
        if config.load_detections[0] == 'false':
            logger.log(logging.INFO, "Not loading detections")
        else:
            gui.context.load_detections(config.load_detections)

    # Single Calibrations
    load_calibration_single_from_calib = True
    if config.load_calibration_single[0] != 'true':
        load_calibration_single_from_calib = False
        if config.load_calibration_single[0] == 'false':
            logger.log(logging.INFO, "Not loading single camera calibrations")
        else:
            gui.on_load_calibration_single(config.load_calibration_single)

    # Multicamera Calibrations
    if config.calib_file[0] is not None:
        if not recs_provided:
            logger.log(logging.INFO, "Attempting to load recordings from calibration file")
        gui.on_load_calib(file=config.calib_file[0], load_recordings=not recs_provided,
                          load_detections=load_detections_from_calib,
                          load_calibration_single=load_calibration_single_from_calib)
    else:
        logger.log(logging.INFO, "No calibration file provided")

    app.exec_()
