# (c) 2019 MPI for Neurobiology of Behavior, Florian Franzen, Abhilash Cheekoti
# SPDX-License-Identifier: LGPL-2.1

import argparse
import logging

from PyQt5.QtWidgets import QApplication

from . import core, ui

logger = logging.getLogger(__name__)


def main():
    """Run main GUI with supplied arguments"""

    parser = argparse.ArgumentParser(prog="CaliPy")

    # Positional arguments
    parser.add_argument('--system_file', type=str, required=False, nargs=1, default=[None],
                        help="yml file (*.system.yml) with sources and recording file paths to open on start")
    parser.add_argument('--videos', type=str, required=False, nargs='*', default=[None],
                        help="Add video files directly instead of a system file")
    parser.add_argument('--pipelines', type=str, required=False, nargs='*', default=[None],
                        help="Add pipelines readable by bbo-svidreader. "
                             "The final output of the pipeline is used to display calibration.")
    parser.add_argument("--calib_file", type=str, required=False, nargs=1, default=[None],
                        help="calibration .yml or .npy file generated by calibcam")
    parser.add_argument('-log', '--loglevel', default='info', help='Provide logging level')

    config = parser.parse_args()
    logging.basicConfig(level=config.loglevel.upper())

    app = QApplication([])
    app.setApplicationDisplayName(parser.prog)

    context = core.CalibrationContext()

    gui = ui.MainWindow(context)
    gui.resize(QApplication.primaryScreen().availableSize())
    gui.show()

    videos_provided = False
    if config.system_file[0]:
        gui.open(config.system_file[0])
        videos_provided = True
    if isinstance(config.videos[0], str):
        rec_file_names = config.videos
        if config.pipelines[0] is None:
            rec_pipelines = None
        elif len(config.pipelines) == len(rec_file_names):
            rec_pipelines = config.pipelines
        elif len(config.pipelines) == 1:
            rec_pipelines = config.pipelines * len(rec_file_names)
        else:
            raise RuntimeError(f"Sorry, the number of pipelines ({len(config.pipelines)}) "
                               f"does not match the number of videos ({len(config.videos)})!")

        gui.open_videos(videos=rec_file_names, pipelines=rec_pipelines)
        videos_provided = True

    if not videos_provided:
        logger.log(logging.INFO, "No video information provided")

    if config.calib_file[0] is not None:
        gui.on_load_calib(file=config.calib_file[0], load_recordings=not videos_provided)
    else:
        logger.log(logging.INFO, "No calibration file provided")

    app.exec_()
